import simpy
import math
from matplotlib import pyplot as plt
from scipy.stats import norm
from scipy.stats import expon
import random
from tabulate import tabulate

RANDOM_SEED = 42
random.seed(RANDOM_SEED)


class Truck(object):

  def __init__(self, env, truck_id, PAYLOADER, WB_LOAD, WB_UNLOAD, SITE_UNLOAD,
               CROSS_BRIDGE):
    self.env = env
    self.truck_id = truck_id
    self.PAYLOADER = PAYLOADER
    self.WB_LOAD = WB_LOAD
    self.WB_UNLOAD = WB_UNLOAD
    self.SITE_UNLOAD = SITE_UNLOAD
    self.CROSS_BRIDGE = CROSS_BRIDGE

    self.trips = 0
    self.waiting_time_loading_pt = 0
    self.waiting_time_wb_load_pt = 0
    self.waiting_time_wb_unload_pt = 0
    self.waiting_time_unloading_pt = 0
    self.waiting_time_cross_bridge = 0

    self.action = env.process(self.run())

  def run(self):
    # each activity of a truck in a cycle is scheduled serially
    while True:
      # loading at starting point
      loading = self.env.process(self.loading())
      yield loading

      # weighment at loading point
      wb_load = self.env.process(self.wb_load())
      yield wb_load

      travelling_loaded = self.env.process(self.travelling_loaded())
      yield travelling_loaded

      # crossing railway gate by loaded truck
      cross_bridge = self.env.process(self.cross_bridge())
      yield cross_bridge

      # weighment at ending point
      wb_unload = self.env.process(self.wb_unload())
      yield wb_unload

      # unloading at end point
      unloading = self.env.process(self.unloading())
      yield unloading

      # crossing railway gate by empty truck
      cross_bridge2 = self.env.process(self.cross_bridge())
      yield cross_bridge2

      # return to starting point
      travelling_empty = self.env.process(self.travelling_empty())
      yield travelling_empty

      self.trips = self.trips + 1

  def loading(self):
    arrived_at_time = self.env.now  # truck arrival time at loading point
    with self.PAYLOADER.request() as payloader:
      yield payloader
      # print("Truck %s started loading at %d min.; " % (self.truck_id, self.env.now))
      availed_at_time = self.env.now  # time at which truck got payloader
      global LOAD_TIME_EXPON_FN
      activity_time = LOAD_TIME_EXPON_FN(
      )  #loading time generated by exponential dist. function
      yield self.env.timeout(activity_time)
      # print("          > Truck %s loading. done at %d min.; wait time = %d" % (self.truck_id, self.env.now, availed_at_time - arrived_at_time))
      self.waiting_time_loading_pt = (
        availed_at_time - arrived_at_time
      ) + self.waiting_time_loading_pt  # measuring waiting time at loading point

  def wb_load(self):
    arrived_at_time = self.env.now
    #    print("Truck %s arrived at wb load at %d min.; " %  (self.truck_id, self.env.now))
    with self.WB_LOAD.request() as wb:
      yield wb
      #      print("Truck %s started weighment wb load at %d min.; " %  (self.truck_id, self.env.now))
      availed_at_time = self.env.now
      global WB_LOAD_TIME_EXPON_FN
      activity_time = WB_LOAD_TIME_EXPON_FN()
      yield self.env.timeout(activity_time)
      #      print("          > Truck %s weighment. done at wb load at %d min.; wait time = %d" % (self.truck_id, self.env.now, availed_at_time - arrived_at_time))

      self.waiting_time_wb_load_pt = (
        availed_at_time - arrived_at_time) + self.waiting_time_wb_load_pt

  def travelling_loaded(self):
    global TRAVEL_TIME_LOADED
    activity_time = random.normalvariate(TRAVEL_TIME_LOADED,
                                         TRAVEL_TIME_LOADED * 0.1)
    #    activity_time = TRAVEL_TIME_LOADED
    yield self.env.timeout(activity_time)
    # print("          > Truck %s reached. unloading pt at %d min.;" %   (self.truck_id, self.env.now))

  def cross_bridge(self):
    arrived_at_time = self.env.now
    #    print("Truck %s arrives at cross bridge %d min.; " % (self.truck_id, self.env.now))
    with self.CROSS_BRIDGE.request(priority=2) as cb:
      yield cb
      availed_at_time = self.env.now
      activity_time = 0  # because activity time is zero at crossbridge, it has only waiting time
      yield self.env.timeout(activity_time)
      #      print("          > Truck %s crossed at %d min.; wait time = %d" % (self.truck_id, self.env.now, availed_at_time - arrived_at_time))
      self.waiting_time_cross_bridge = (
        availed_at_time - arrived_at_time) + self.waiting_time_cross_bridge

  def wb_unload(self):
    arrived_at_time = self.env.now
    with self.WB_UNLOAD.request() as wb:
      yield wb
      availed_at_time = self.env.now
      # print("Truck %s started weighment at %d min.; " % (self.truck_id, self.env.now))
      global WB_UNLOAD_TIME_EXPON_FN
      activity_time = WB_UNLOAD_TIME_EXPON_FN()
      yield self.env.timeout(activity_time)
      # print(
      #   "          > Truck %s weighment at unload pt . done at %d min.; wait time = %d"
      #   % (self.truck_id, self.env.now, availed_at_time - arrived_at_time))
      wait_time = availed_at_time - arrived_at_time
      self.waiting_time_wb_unload_pt = (
        wait_time) + self.waiting_time_wb_unload_pt

  def unloading(self):
    arrived_at_time = self.env.now
    with self.SITE_UNLOAD.request() as siteunload:
      yield siteunload
      # print("Truck %s started loading at %d min.; " % (self.truck_id, self.env.now))
      availed_at_time = self.env.now
      global UNLOAD_TIME_EXPON_FN
      activity_time = UNLOAD_TIME_EXPON_FN()
      yield self.env.timeout(activity_time)
      # print("          > Truck %s loading. done at %d min.; wait time = %d" % (self.truck_id, self.env.now, availed_at_time - arrived_at_time))

      self.waiting_time_unloading_pt = (
        availed_at_time - arrived_at_time) + self.waiting_time_unloading_pt

  def travelling_empty(self):
    global TRAVEL_TIME_EMPTY
    activity_time = random.normalvariate(TRAVEL_TIME_EMPTY,
                                         TRAVEL_TIME_EMPTY * 0.1)
    yield self.env.timeout(activity_time)
    # print("          > Truck %s reached. loading pt at %d min.;" %    (self.truck_id, self.env.now))


def rail_crossing_event(env, cross_brigde, total_simulation_time):
  """Train crossing event after every GATE_OPEN_HOUR """
  global GATE_OPEN_TIME
  global GATE_CLOSE_TIME
  # print(total_simulation_time, env.now)
  while total_simulation_time > env.now:
    yield env.timeout(GATE_OPEN_TIME)  # keeping gate open for given time
    # print("closing gate @ ", env.now / (60))
    with cross_brigde.request(priority=1) as req:
      yield req
      yield env.timeout(GATE_CLOSE_TIME)
      # print("queue size    = ", len(cross_brigde.queue))
      # print("openning gate @ ", env.now / (60))


def calculate_speed(distance):
  a1 = 2.052926642
  a2 = 2.909579524
  a3 = 1.630052131
  a4 = 4.574267564
  a5 = 6.706654838
  a6 = 5.176884002
  a7 = 6.458775828
  d = distance
  speed = -(a1 * (d**6) / 10000000) + (a2 * (d**5) / 100000) - (
    a3 * (d**4) / 1000) + (a4 *
                           (d**3) / 100) - (a5 *
                                            (d**2) / 10) + (a6 *
                                                            (d**1) / 1) + a7
  if speed < 10:
    speed = 10
  if speed > 40:
    speed = 40
  return round(speed, 2)


def custom_exponential_dist_fn(min, avg_deviation_from_min):

  def expo():
    return round(min + (random.expovariate(1 /
                                           (min * avg_deviation_from_min))))

  return expo


def simulate(truck_count):
  # Create an environment and start the setup process
  env = simpy.Environment()
  DAYS = 1
  global WORKING_TIME
  SIM_TIME = WORKING_TIME * 60 * 60 * DAYS  # in seconds

  # -----------------Resources----------------
  global PAYLOADER_COUNT
  PAYLOADER = simpy.Resource(env, capacity=PAYLOADER_COUNT)
  WB_LOAD = simpy.Resource(env, capacity=1)
  WB_UNLOAD = simpy.Resource(env, capacity=1)
  SITE_UNLOAD = simpy.Resource(env, capacity=1)
  CROSS_BRIDGE = simpy.PreemptiveResource(env, capacity=1)

  # -----------------Add to simulation--------
  ls = []
  for id in range(truck_count):
    t = Truck(env, "no." + str(id + 1), PAYLOADER, WB_LOAD, WB_UNLOAD,
              SITE_UNLOAD, CROSS_BRIDGE)
    ls.append(t)

  env.process(rail_crossing_event(env, CROSS_BRIDGE, SIM_TIME))

  # -----------------Start simulation---------
  env.run(until=SIM_TIME)

  # ---------------Measure Metrics------
  ls_waiting_time_loading_pt = []
  ls_waiting_time_wb_load_pt = []
  ls_waiting_time_wb_unload_pt = []
  ls_waiting_time_unloading_pt = []
  ls_waiting_time_crossbridge = []
  ls_trips_per_truck = []

  for t in ls:

    #    print("truck " + t.truck_id, "trips", t.trips)
    #    print("truck "+t.truck_id, "cummulative waiting time at loading pt",t.waiting_time_loading_pt)
    #    print("truck " + t.truck_id, "average waiting time at loading pt", t.waiting_time_loading_pt / t.trips)
    #    print("truck "+t.truck_id, "cummulative waiting time at wb loading pt",t.waiting_time_wb_load_pt)
    #    print("truck " + t.truck_id, "average waiting time at wb loading pt", t.waiting_time_wb_load_pt / t.trips)
    ls_waiting_time_loading_pt.append(t.waiting_time_loading_pt / t.trips)
    ls_waiting_time_wb_load_pt.append(t.waiting_time_wb_load_pt / t.trips)
    ls_waiting_time_wb_unload_pt.append(t.waiting_time_wb_unload_pt / t.trips)
    ls_waiting_time_unloading_pt.append(t.waiting_time_unloading_pt / t.trips)
    ls_waiting_time_crossbridge.append(t.waiting_time_cross_bridge / t.trips)
    ls_trips_per_truck.append(t.trips)

    # print("truck " + t.truck_id, "average waiting time at loading pt", t.waiting_time_loading_pt / t.trips)
    # print("truck " + t.truck_id, "average waiting time at wb load pt",  t.waiting_time_wb_load_pt / t.trips)
    # print("truck " + t.truck_id, "average waiting time at wb unload pt",   t.waiting_time_wb_unload_pt / t.trips)
    # print("truck " + t.truck_id, "average waiting time at unloading pt",   t.waiting_time_unloading_pt / t.trips)

  avg_wt_time_loading_pt = round(
    sum(ls_waiting_time_loading_pt) / len(ls_waiting_time_loading_pt), 2)

  avg_wt_time_wb_load_pt = round(
    sum(ls_waiting_time_wb_load_pt) / len(ls_waiting_time_wb_load_pt), 2)

  avg_wt_time_wb_unload_pt = round(
    sum(ls_waiting_time_wb_unload_pt) / len(ls_waiting_time_wb_unload_pt), 2)

  avg_wt_time_unloading_pt = round(
    sum(ls_waiting_time_unloading_pt) / len(ls_waiting_time_unloading_pt), 2)

  avg_wt_time_crossbridge = round(
    sum(ls_waiting_time_crossbridge) / len(ls_waiting_time_crossbridge), 2)

  avg_trips_per_truck = round(
    sum(ls_trips_per_truck) / len(ls_trips_per_truck), 2)

  total_trips = round(sum(ls_trips_per_truck))

  # print(sum(ls_waiting_time_loading_pt) / len(ls_waiting_time_loading_pt))

  return (avg_wt_time_loading_pt, avg_wt_time_wb_load_pt,
          avg_wt_time_wb_unload_pt, avg_wt_time_unloading_pt,
          avg_trips_per_truck, total_trips, avg_wt_time_crossbridge)


if __name__ == '__main__':

  # ----------------- Activity time ----------

  # Exponential distribution

  LOAD_TIME_MIN = 5 * 60  #in seconds; minimum loading time
  LOAD_TIME_AVG_DEVIATION_FROM_MIN = 0.3  # (in percentage)
  AVG_LOAD_TIME = LOAD_TIME_MIN + (LOAD_TIME_AVG_DEVIATION_FROM_MIN *
                                   LOAD_TIME_MIN)
  LOAD_TIME_EXPON_FN = custom_exponential_dist_fn(
    LOAD_TIME_MIN, LOAD_TIME_AVG_DEVIATION_FROM_MIN)

  UNLOAD_TIME_MIN = 2 * 60  #in seconds
  UNLOAD_TIME_AVG_DEVIATION_FROM_MIN = 1  # (in percentage)
  AVG_UNLOAD_TIME = UNLOAD_TIME_MIN + (UNLOAD_TIME_AVG_DEVIATION_FROM_MIN *
                                       UNLOAD_TIME_MIN)
  UNLOAD_TIME_EXPON_FN = custom_exponential_dist_fn(
    UNLOAD_TIME_MIN, UNLOAD_TIME_AVG_DEVIATION_FROM_MIN)

  WB_LOAD_TIME_MIN = 2.5 * 60  #in seconds
  WB_LOAD_TIME_AVG_DEVIATION_FROM_MIN = 0.5  # (in percentage)
  AVG_WB_LOAD_TIME = WB_LOAD_TIME_MIN + (WB_LOAD_TIME_AVG_DEVIATION_FROM_MIN *
                                         WB_LOAD_TIME_MIN)
  WB_LOAD_TIME_EXPON_FN = custom_exponential_dist_fn(
    WB_LOAD_TIME_MIN, WB_LOAD_TIME_AVG_DEVIATION_FROM_MIN)

  WB_UNLOAD_TIME_MIN = 2.5 * 60  #in seconds
  WB_UNLOAD_TIME_AVG_DEVIATION_FROM_MIN = 1  # (in percentage)
  AVG_WB_UNLOAD_TIME = WB_LOAD_TIME_MIN + (
    WB_UNLOAD_TIME_AVG_DEVIATION_FROM_MIN * WB_UNLOAD_TIME_MIN)
  WB_UNLOAD_TIME_EXPON_FN = custom_exponential_dist_fn(
    WB_UNLOAD_TIME_MIN, WB_UNLOAD_TIME_AVG_DEVIATION_FROM_MIN)

  GATE_CLOSE_TIME = 15 * 60  # seconds
  GATE_OPEN_TIME = 2 * 60 * 60  # seconds

  # ----------- PARAMETERS ---------
  WORKING_TIME = 18  #HR
  PAYLOADER_COUNT = 1  #nos
  DISTANCE = 3  #KM
  QUANTITY = 4000  #TONNES
  TRUCK_CARRYING_CAPACITY = 25  #TONNES

  # ---------- DEPENDENT VARIABLES --------
  NO_OF_TRIPS = math.ceil(QUANTITY / TRUCK_CARRYING_CAPACITY)
  SPEED_LOADED = calculate_speed(DISTANCE)  #KM/HR
  SPEED_EMPTY = SPEED_LOADED * 1.1  #KM/HR
  TRAVEL_TIME_EMPTY = round(DISTANCE * 60 * 60 / SPEED_EMPTY)  #SEC
  TRAVEL_TIME_LOADED = round(DISTANCE * 60 * 60 / SPEED_LOADED)  #SEC
  CYCLE_NO_WAIT = TRAVEL_TIME_LOADED + TRAVEL_TIME_EMPTY + AVG_WB_LOAD_TIME + AVG_WB_UNLOAD_TIME + AVG_LOAD_TIME + AVG_UNLOAD_TIME
  TRIPS_PER_TRUCK = math.ceil(WORKING_TIME * 60 * 60 / (CYCLE_NO_WAIT))
  TRUCK_COUNT = math.ceil(NO_OF_TRIPS / TRIPS_PER_TRUCK)

  # out = simulate(20)
  # -------
  ls_truck_count = []
  ls_avg_wt_time_loading_pt = []
  ls_avg_wt_time_wb_load_pt = []
  ls_avg_wt_time_wb_unload_pt = []
  ls_avg_wt_time_unloading_pt = []
  ls_avg_wt_time_crossbridge = []
  ls_total_avg_cycle_time = []
  ls_trips_per_truck = []
  ls_total_trips = []

  table_waiting_times = []
  headers_waiting_times = [
    "Trucks", "Load\npt", "WB \nLoad\npt", "WB\nUnload\npt", "Unload\nPt",
    "Cross\nbridge"
  ]
  #  table_waiting_times.set_cols_align(['l', 'r', 'r', 'r', 'r'])

  table_results = []
  headers_results = [
    "Trucks", "Total\nWait\nTime", "Total\nCycle\nTime", "Trips\nper\ntruck",
    "Total\nTrips"
  ]
  #  table_results.set_cols_align(['l', 'r', 'r', 'r', ])

  #  for truck_count in range(TRUCK_COUNT,TRUCK_COUNT+5):
  for truck_count in range(round(TRUCK_COUNT * 0.8), round(TRUCK_COUNT * 2)):
    #    print("Simulation cycle with truck_count = ", truck_count + 1)
    (out1, out2, out3, out4, out5, out6, out7) = simulate(truck_count + 1)
    ls_avg_wt_time_loading_pt.append(round(out1 / 60, 2))
    ls_avg_wt_time_wb_load_pt.append(round(out2 / 60, 2))
    ls_avg_wt_time_wb_unload_pt.append(round(out3 / 60, 2))
    ls_avg_wt_time_unloading_pt.append(round(out4 / 60, 2))
    ls_avg_wt_time_crossbridge.append(round(out7 / 60, 2))
    ls_total_avg_cycle_time.append(
      round((CYCLE_NO_WAIT + out1 + out2 + out3 + out4 + out7) / 60, 2))
    ls_trips_per_truck.append(out5)
    ls_truck_count.append(truck_count + 1)
    ls_total_trips.append(out6)

    table_waiting_times.append([
      truck_count + 1,
      round(out1 / 60, 2),
      round(out2 / 60, 2),
      round(out3 / 60, 2),
      round(out4 / 60, 2),
      round(out7 / 60, 2)
    ])
    table_results.append([
      truck_count + 1,
      round((out1 + out2 + out3 + out4 + out7) / 60, 2),
      round((CYCLE_NO_WAIT + out1 + out2 + out3 + out4 + out7) / 60, 2),
      round(out5, 1), out6
    ])

  print()
  print("=========== PARAMETERS ===========")
  print("WORKING TIME               =", round(WORKING_TIME), "hrs")
  print("COAL QUANTITY              =", round(QUANTITY), "tonnes")
  print("DISTANCE                   =", round(DISTANCE), "km")
  print("TRUCK_CARRYING_CAPACITY    =", round(TRUCK_CARRYING_CAPACITY),
        "tonnes")
  print("PAYLOADERS                 =", PAYLOADER_COUNT, "nos")
  print()
  print("=========== TIME PARAMETERS ===========")
  print("LOADING TIME(Avg.|Min.)    =", round(AVG_LOAD_TIME / 60, 2), "|",
        round(LOAD_TIME_MIN / 60, 2), "min")
  print("LOAD WB TIME(Avg.|Min.)    =", round(AVG_WB_LOAD_TIME / 60, 2), "|",
        round(WB_LOAD_TIME_MIN / 60, 2), "min")
  print("EMPTY WB TIME(Avg.|Min.)   =", round(AVG_WB_UNLOAD_TIME / 60, 2), "|",
        round(WB_UNLOAD_TIME_MIN / 60, 2), "min")
  print("UNLOADING TIME(Avg.|Min.)  =", round(AVG_UNLOAD_TIME / 60, 2), "|",
        round(UNLOAD_TIME_MIN / 60, 2), "min")
  print("GATE CLOSE TIME            =", round(GATE_CLOSE_TIME / 60, 2), "min")
  print("GATEE OPEN TIME            =", round(GATE_OPEN_TIME / (60 * 60), 2),
        "hr")
  print()
  print("=========== DEPENDENT VARIABLES ===========")
  print("SPEED_LOADED               =", round(SPEED_LOADED, 1), "km/hr")
  print("SPEED_EMPTY                =", round(SPEED_EMPTY, 1), "km/hr")
  print("TRAVEL_TIME_LOADED         =", round(TRAVEL_TIME_LOADED / 60, 2),
        "min")
  print("TRAVEL_TIME_EMPTY          =", round(TRAVEL_TIME_EMPTY / 60, 2),
        "min")
  print("TOTAL NO_OF_TRIPS REQUIRED =", round(NO_OF_TRIPS), "trips")
  print("CYCLE_TIME WITHOUT WAIT    =", round(CYCLE_NO_WAIT / 60), "min")
  print("TRIPS_PER_TRUCK            =", TRIPS_PER_TRUCK, " trips")
  print("MINIMUM TRUCKS REQUIRED    =", TRUCK_COUNT, "nos")
  print()

  # print("truck count,", ls_truck_count)
  print("========= AVG. WAITING TIMES (in minutes)=======")
  print()
  print(
    tabulate(table_waiting_times, headers_waiting_times,
             tablefmt="fancy_grid"))
  #  print("at loading point,\n", ls_avg_wt_time_loading_pt)
  #  print("at wb load pt,\n", ls_avg_wt_time_wb_load_pt)
  #  print("at wb unload pt,\n", ls_avg_wt_time_wb_unload_pt)
  #  print("at unloading point,\n", ls_avg_wt_time_unloading_pt)
  print()

  print("============ RESULTS ==========")
  print()
  print(tabulate(table_results, headers_results, tablefmt="fancy_grid"))
  #  print("no of trucks,\n", ls_truck_count)
  #  print("avg. trips per truck,\n", ls_trips_per_truck)
  #  print("total trip count,\n", ls_total_trips)
  #  print("total avg cycle time,\n", ls_total_avg_cycle_time)
  print("===============================")

  # plt.plot(ls_avg_wt_time_loading_pt, ls_truck_count)  # graphing
  #plt.plot(
  #ls_avg_wt_time_wb_load_pt,
  #ls_truck_count,
  #)  # graphing

#  #graph 1:
  plt.subplot(6, 1, 1)
  plt.plot(ls_truck_count, ls_avg_wt_time_loading_pt)
 # plt.title("Average waiting time")
  plt.xlabel('No. of trucks')
  plt.ylabel('Loading pt')

 #graph 2:
  plt.subplot(6, 1, 2)
  plt.plot(ls_truck_count, ls_avg_wt_time_wb_load_pt, color='r')
 # plt.title("WB LOAD POINT")
  plt.xlabel('No. of trucks')
  plt.ylabel('WB load pt')

 #graph 3:
  plt.subplot(6, 1, 3)
  plt.plot(ls_truck_count, ls_avg_wt_time_wb_unload_pt, color='g')
 # plt.title("WB UNLOAD POINT")
  plt.xlabel('No. of trucks')
  plt.ylabel('WB unload pt')

 #graph 4:
  plt.subplot(6, 1, 4)
  plt.plot(ls_truck_count, ls_avg_wt_time_unloading_pt, color='y')
 # plt.title("UNLOADING POINT")
  plt.xlabel('No. of trucks')
  plt.ylabel('Unloading pt')

 #graph 5:
  plt.subplot(6, 1, 5)
  plt.plot(ls_truck_count, ls_trips_per_truck, color='b')
 # plt.title("UNLOADING POINT")
  plt.xlabel('No. of trucks')
  plt.ylabel('Trips per truck')

 #graph 6:
  plt.subplot(6, 1, 6)
  plt.plot(ls_truck_count, ls_total_trips, color='b')
 # plt.title("UNLOADING POINT")
  plt.xlabel('No. of trucks')
  plt.ylabel('Total Trips')




  plt.show()
